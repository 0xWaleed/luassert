local match = require 'luassert.match'

assert(type(match) == "table")

describe("Test Matchers", function()
  it("Checks truthy() matcher", function()
    assert.is_false(match.is_truthy()(nil))
    assert.is_true(match.is_truthy()(true))
    assert.is_false(match.is_truthy()(false))
    assert.is_true(match.is_truthy()(123))
    assert.is_true(match.is_truthy()(""))
    assert.is_true(match.is_truthy()({}))
    assert.is_true(match.is_truthy()(function() end))
  end)

  it("Checks falsy() matcher", function()
    assert.is_true(match.is_falsy()(nil))
    assert.is_false(match.is_falsy()(true))
    assert.is_true(match.is_falsy()(false))
    assert.is_false(match.is_falsy()(123))
    assert.is_false(match.is_falsy()(""))
    assert.is_false(match.is_falsy()({}))
    assert.is_false(match.is_falsy()(function() end))
  end)

  it("Checks true() matcher", function()
    assert.is_false(match.is_true()(nil))
    assert.is_true(match.is_true()(true))
    assert.is_false(match.is_true()(false))
    assert.is_false(match.is_true()(123))
    assert.is_false(match.is_true()(""))
    assert.is_false(match.is_true()({}))
    assert.is_false(match.is_true()(function() end))
  end)

  it("Checks false() matcher", function()
    assert.is_false(match.is_false()(nil))
    assert.is_false(match.is_false()(true))
    assert.is_true(match.is_false()(false))
    assert.is_false(match.is_false()(123))
    assert.is_false(match.is_false()(""))
    assert.is_false(match.is_false()({}))
    assert.is_false(match.is_false()(function() end))
  end)

  it("Checks nil() matcher", function()
    assert.is_true(match.is_nil()(nil))
    assert.is_false(match.is_nil()(true))
    assert.is_false(match.is_nil()(false))
    assert.is_false(match.is_nil()(123))
    assert.is_false(match.is_nil()(""))
    assert.is_false(match.is_nil()({}))
    assert.is_false(match.is_nil()(function() end))
  end)

  it("Checks boolean() matcher", function()
    assert.is_false(match.is_boolean()(nil))
    assert.is_true(match.is_boolean()(true))
    assert.is_true(match.is_boolean()(false))
    assert.is_false(match.is_boolean()(123))
    assert.is_false(match.is_boolean()(""))
    assert.is_false(match.is_boolean()({}))
    assert.is_false(match.is_boolean()(function() end))
  end)

  it("Checks number() matcher", function()
    assert.is_false(match.is_number()(nil))
    assert.is_false(match.is_number()(true))
    assert.is_false(match.is_number()(false))
    assert.is_true(match.is_number()(123))
    assert.is_false(match.is_number()(""))
    assert.is_false(match.is_number()({}))
    assert.is_false(match.is_number()(function() end))
  end)

  it("Checks string() matcher", function()
    assert.is_false(match.is_string()(nil))
    assert.is_false(match.is_string()(true))
    assert.is_false(match.is_string()(false))
    assert.is_false(match.is_string()(123))
    assert.is_true(match.is_string()(""))
    assert.is_false(match.is_string()({}))
    assert.is_false(match.is_string()(function() end))
  end)

  it("Checks table() matcher", function()
    assert.is_false(match.is_boolean()(nil))
    assert.is_false(match.is_table()(nil))
    assert.is_false(match.is_table()(true))
    assert.is_false(match.is_table()(false))
    assert.is_false(match.is_table()(123))
    assert.is_false(match.is_table()(""))
    assert.is_true(match.is_table()({}))
    assert.is_false(match.is_table()(function() end))
  end)

  it("Checks function() matcher", function()
    assert.is_false(match.is_function()(nil))
    assert.is_false(match.is_function()(true))
    assert.is_false(match.is_function()(false))
    assert.is_false(match.is_function()(123))
    assert.is_false(match.is_function()(""))
    assert.is_false(match.is_function()({}))
    assert.is_true(match.is_function()(function() end))
  end)

  it("Checks userdata() matcher", function()
    assert.is_true(match.is_userdata()(io.stdout))
    assert.is_false(match.is_userdata()(nil))
    assert.is_false(match.is_userdata()(true))
    assert.is_false(match.is_userdata()(false))
    assert.is_false(match.is_userdata()(123))
    assert.is_false(match.is_userdata()(""))
    assert.is_false(match.is_userdata()({}))
    assert.is_false(match.is_userdata()(function() end))
  end)

  it("Checks thread() matcher", function()
    local mythread = coroutine.create(function() end)
    assert.is_true(match.is_thread()(mythread))
    assert.is_false(match.is_thread()(nil))
    assert.is_false(match.is_thread()(true))
    assert.is_false(match.is_thread()(false))
    assert.is_false(match.is_thread()(123))
    assert.is_false(match.is_thread()(""))
    assert.is_false(match.is_thread()({}))
    assert.is_false(match.is_thread()(function() end))
  end)

  it("Checks to see if tables 1 and 2 are equal", function()
    local table1 = { derp = false}
    local table2 = table1
    assert.is_true(match.is_equal(table1)(table2))
    assert.is_true(match.is_equal(table2)(table1))
  end)

  it("Checks equals() matcher to handle nils properly", function()
    assert.is.error(function() match.is_equals()() end)  -- minimum 1 argument
    assert.is_true(match.is_equal(nil)(nil))
    assert.is_false(match.is_equal("a string")(nil))
    assert.is_false(match.is_equal(nil)("a string"))
  end)

  it("Checks the same() matcher for tables with protected metatables", function()
    local troubleSomeTable = {}
    setmetatable(troubleSomeTable, {__metatable = 0})
    assert.is_true(match.is_same(troubleSomeTable)(troubleSomeTable))
  end)

  it("Checks same() matcher to handle nils properly", function()
    assert.is.error(function() match.same()() end)  -- minimum 1 arguments
    assert.is_true(match.is_same(nil)(nil))
    assert.is_false(match.is_same("a string")(nil))
    assert.is_false(match.is_same(nil)("a string"))
  end)

  it("Checks matches() matcher does string matching", function()
    assert.is.error(function() match.matches()() end)  -- minimum 1 arguments
    assert.is.error(function() match.matches({})() end)  -- arg1 must be a string
    assert.is.error(function() match.matches('s', 's')() end)  -- arg2 must be a number or nil
    assert.is_true(match.matches("%w+")("test"))
    assert.is_true(match.has_match("%w+")("test"))
    assert.is_false(match.matches("%d+")("derp"))
    assert.is_true(match.has_match("test", nil, true)("test"))
    assert.is_false(match.has_match("%w+", nil, true)("test"))
    assert.is_true(match.has_match("^test", 5)("123 test"))
    assert.is_false(match.has_match("%d+", '4')("123 test"))
  end)

end)
